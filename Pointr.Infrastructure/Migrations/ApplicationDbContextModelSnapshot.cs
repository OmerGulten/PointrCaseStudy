// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pointr.Infrastructure.Data;

#nullable disable

namespace Pointr.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pointr.Domain.Entities.Page", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SiteId", "Slug")
                        .IsUnique();

                    b.ToTable("Pages", (string)null);
                });

            modelBuilder.Entity("Pointr.Domain.Entities.PageDraft", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DraftNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PageId", "DraftNumber")
                        .IsUnique();

                    b.ToTable("PageDrafts", (string)null);
                });

            modelBuilder.Entity("Pointr.Domain.Entities.PagePublished", b =>
                {
                    b.Property<Guid>("PageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DraftId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("PublishedUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("PageId");

                    b.HasIndex("DraftId")
                        .IsUnique();

                    b.ToTable("PagePublished", (string)null);
                });

            modelBuilder.Entity("Pointr.Domain.Entities.PageDraft", b =>
                {
                    b.HasOne("Pointr.Domain.Entities.Page", "Page")
                        .WithMany("PageDrafts")
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Pointr.Domain.Entities.PagePublished", b =>
                {
                    b.HasOne("Pointr.Domain.Entities.PageDraft", "Draft")
                        .WithOne("PagePublished")
                        .HasForeignKey("Pointr.Domain.Entities.PagePublished", "DraftId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Pointr.Domain.Entities.Page", "Page")
                        .WithOne("PagePublished")
                        .HasForeignKey("Pointr.Domain.Entities.PagePublished", "PageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Draft");

                    b.Navigation("Page");
                });

            modelBuilder.Entity("Pointr.Domain.Entities.Page", b =>
                {
                    b.Navigation("PageDrafts");

                    b.Navigation("PagePublished");
                });

            modelBuilder.Entity("Pointr.Domain.Entities.PageDraft", b =>
                {
                    b.Navigation("PagePublished");
                });
#pragma warning restore 612, 618
        }
    }
}
